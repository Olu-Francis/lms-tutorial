const CODE_SNIPPETS = {
    Debug_Excercise_L1: "import threading\n\n# DEBUG: Identify any errors in this code and fix them, or improve the method used.\n\nclass Counter:\n    def __init__(self):\n        self.count = 0\n\n    def increment(self):\n        for _ in range(1000):\n            self.count += 1\n\ncounter = Counter()\n\ndef worker():\n    for _ in range(1000):\n        counter.increment()\n\nthreads = []\nfor _ in range(5):\n    t = threading.Thread(target=worker)\n    threads.append(t)\n    t.start()\n\nfor t in threads:\n    t.join()\n\nprint(\"Final count:\", counter.count)",
    Debug_Excercise_L2: "import threading\n\n# DEBUG: Identify any errors in this code and fix them, or improve the method used.\n\nlock1 = threading.Lock()\nlock2 = threading.Lock()\n\ndef task1():\n    with lock1:\n        print(\"Task1 acquired lock1\")\n        with lock2:\n            print(\"Task1 acquired lock2\")\n\ndef task2():\n    with lock2:\n        print(\"Task2 acquired lock2\")\n        with lock1:\n            print(\"Task2 acquired lock1\")\n\nthreading.Thread(target=task1).start()\nthreading.Thread(target=task2).start()",
    Debug_Excercise_L3: "# DEBUG: Identify any errors in this code and fix them, or improve the method used.\n\ndef inefficient_fibonacci(n):\n    if n <= 1:\n        return n\n    return inefficient_fibonacci(n-1) + inefficient_fibonacci(n-2)\n\nprint(inefficient_fibonacci(30))",
    Debug_Excercise_L4: "# DEBUG: Identify any errors in this code and fix them, or improve the method used.\n\ndef recursive_function(n):\n    if n == 0:\n        return\n    print(n)\n    recursive_function(n - 1)\n\nrecursive_function(1000)",
    Debug_Excercise_L5: "# DEBUG: Identify any errors in this code and fix them, or improve the method used.\n\ndef check_equality():\n    x = 0.1 + 0.2\n    if x == 0.3:\n        print(\"Equal\")\n    else:\n        print(\"Not Equal\")\n\ncheck_equality()",
    Debug_Excercise_L6: "# DEBUG: Identify any errors in this code and fix them, or improve the method used.\n\ndef modify_list():\n    nums = [1, 2, 3, 4, 5]\n    for num in nums:\n        if num % 2 == 0:\n            nums.remove(num)\n    print(nums)\n\nmodify_list()",
    Debug_Excercise_L7: "# DEBUG: Identify any errors in this code and fix them, or improve the method used.\n\nfunctions = []\nfor i in range(5):\n    functions.append(lambda: print(i))\n\nfor f in functions:\n    f()",
    Debug_Excercise_L8: "# DEBUG: Identify any errors in this code and fix them, or improve the method used.\n\ndef divide(a, b):\n    return a / b\n\nprint(divide(10, 0)) \n\n\n# DEBUG: Identify any errors in this code and fix them, or improve the method used.\n\nimport gc\n\nclass Node:\n    def __init__(self):\n        self.ref = self\n\nnode = Node()\ndel node\nprint(gc.collect()) \n\n\n# DEBUG: Identify any errors in this code and fix them, or improve the method used.\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n - 1)\n\nprint(factorial(1000)) \n\n\n# DEBUG: Identify any errors in this code and fix them, or improve the method used.\n\ndef modify_dict():\n    d = {\"a\": 1, \"b\": 2, \"c\": 3}\n    for k in list(d.keys()):\n        if d[k] % 2 == 0:\n            del d[k]\n    print(d)\n\nmodify_dict() \n\n\n# DEBUG: Identify any errors in this code and fix them, or improve the method used.\n\ndef append_to_list(value, lst=[]):\n    lst.append(value)\n    return lst\n\nprint(append_to_list(1))\nprint(append_to_list(2))\nprint(append_to_list(3))",
    Debug_Excercise_L9: "# DEBUG: Identify any errors in this code and fix them, or improve the method used.\n\ndef append_to_list(value, lst=[]):\n    lst.append(value)\n    return lst\n\nprint(append_to_list(1))\nprint(append_to_list(2))\nprint(append_to_list(3))\n\n\n# DEBUG: Identify any errors in this code and fix them, or improve the method used.\n\nfrom multiprocessing import Process\n\nshared_list = []\n\ndef modify_shared_list():\n    shared_list.append(1)\n\np = Process(target=modify_shared_list)\np.start()\np.join()\nprint(shared_list)",
    Debug_Excercise_L10: "# DEBUG: Identify any errors in this code and fix them, or improve the method used.\n\ndef loop_issue():\n    for i in range(1, 11):\n        print(i)\n\nloop_issue()",
}

export default CODE_SNIPPETS;